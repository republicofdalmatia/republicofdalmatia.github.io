{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/remote-access-to-home-assistant","result":{"data":{"markdownRemark":{"html":"<p>For installing Home Assistant on Raspberry Pi please check <a href=\"installing-home-assistant-on-raspberry-pi\">this cookbook</a>.</p>\n<h3 id=\"configuring-duck-dns\" style=\"position:relative;\"><a href=\"#configuring-duck-dns\" aria-label=\"configuring duck dns permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring Duck DNS</h3>\n<p><a href=\"https://www.home-assistant.io/integrations/duckdns/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Duck DNS</a> is used for enabling remote access to the Home Assistant server. It also supports Let's Encrypt for enabling <em>https</em>.</p>\n<ul>\n<li>Create <a href=\"https://www.duckdns.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Duck DNS</a> free account and create a domain. <a href=\"dynamic-dns-with-duck-dns\">Detailed instructions here</a>.</li>\n<li>Install Duck DNS add-on and configure it with the following parameters and start it:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">lets_encrypt</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">accept_terms</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">certfile</span><span class=\"token punctuation\">:</span> fullchain.pem\n  <span class=\"token key atrule\">keyfile</span><span class=\"token punctuation\">:</span> privkey.pem\n<span class=\"token key atrule\">token</span><span class=\"token punctuation\">:</span> &lt;DUCK_DNS_TOKEN<span class=\"token punctuation\">></span>\n<span class=\"token key atrule\">domains</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> &lt;DOMAIN_NAME<span class=\"token punctuation\">></span>.duckdns.org\n<span class=\"token key atrule\">aliases</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token key atrule\">seconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">300</span></code></pre></div>\n<p>For enabling <em>https</em> go to File editor and select <code class=\"language-text\">configuration.yaml</code> file and add the following configuration. Restart the server afterwards:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">base_url</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//&lt;DOMAIN_NAME<span class=\"token punctuation\">></span>.duckdns.org<span class=\"token punctuation\">:</span>&lt;PORT<span class=\"token punctuation\">></span>\n  <span class=\"token key atrule\">server_port</span><span class=\"token punctuation\">:</span> &lt;PORT<span class=\"token punctuation\">></span>\n  <span class=\"token key atrule\">ssl_certificate</span><span class=\"token punctuation\">:</span> /ssl/fullchain.pem\n  <span class=\"token key atrule\">ssl_key</span><span class=\"token punctuation\">:</span> /ssl/privkey.pem\n  <span class=\"token key atrule\">ip_ban_enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">login_attempts_threshold</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span></code></pre></div>\n<p>Configure the home router to assign a static IP to the Raspberry Pi and forward the desired external port to Raspberry Pi's <code class=\"language-text\">&lt;PORT&gt;</code>.</p>","fields":{"slug":"remote-access-to-home-assistant"},"frontmatter":{"title":"Remote access to Home Assistant","date":"11.10.2020","category":"Smart Home","tags":["home assistant","duck dns"],"banner":""},"timeToRead":1}},"pageContext":{"slug":"remote-access-to-home-assistant","prev":{"excerpt":"These instructions are based on the Home Assistant official documentation. Installing Home Assistant For setting up Home Assistant on Raspberry Pi, first download an appropriate image for Raspberry Pi version from the following link. Flash theâ€¦","html":"<p>These instructions are based on the <a href=\"https://www.home-assistant.io/hassio/installation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Home Assistant official documentation</a>.</p>\n<h2 id=\"installing-home-assistant\" style=\"position:relative;\"><a href=\"#installing-home-assistant\" aria-label=\"installing home assistant permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing Home Assistant</h2>\n<p>For setting up <a href=\"https://www.home-assistant.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Home Assistant</a> on <a href=\"https://www.raspberrypi.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Raspberry Pi</a>, first download an appropriate image for Raspberry Pi version from the following <a href=\"https://www.home-assistant.io/hassio/installation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">link</a>.</p>\n<p>Flash the downloaded image to an SSD card using appropriate software such as <a href=\"https://www.balena.io/etcher/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">balenaEtcher</a>. If downloaded as AppImage, start balenaEtcher with <code class=\"language-text\">sudo ./balenaEtcher-version-xbit.AppImage</code>.</p>\n<p>Mount <code class=\"language-text\">hassio-boot</code> partition by using Disks utility in Linux and create a file <code class=\"language-text\">CONFIG/network/my-network</code> on that partition with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token selector\">[connection]</span>\n<span class=\"token constant\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>my-network</span>\n<span class=\"token comment\">#### Create random uuid: https://www.uuidgenerator.net/</span>\n<span class=\"token constant\">uuid</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>&lt;UUID></span>\n<span class=\"token constant\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>802-11-wireless</span>\n\n<span class=\"token selector\">[802-11-wireless]</span>\n<span class=\"token constant\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>infrastructure</span>\n<span class=\"token comment\">#### WiFi name</span>\n<span class=\"token constant\">ssid</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>&lt;SSID></span>\n<span class=\"token comment\">#### Uncomment below if SSID is not broadcasted</span>\n<span class=\"token comment\">#hidden=true </span>\n\n<span class=\"token selector\">[802-11-wireless-security]</span>\n<span class=\"token constant\">auth-alg</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>open</span>\n<span class=\"token constant\">key-mgmt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>wpa-psk</span>\n<span class=\"token comment\">#### WiFi secret key</span>\n<span class=\"token constant\">psk</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>&lt;WLAN_SECRET_KEY></span>\n\n<span class=\"token selector\">[ipv4]</span>\n<span class=\"token constant\">method</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>auto</span>\n\n<span class=\"token selector\">[ipv6]</span>\n<span class=\"token constant\">addr-gen-mode</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>stable-privacy</span>\n<span class=\"token constant\">method</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>auto</span></code></pre></div>\n<p>Put the SSD card in Raspberry Pi and power it. Wait for cca 20 minutes for Home Assistant to update itself. Once it is done, Home Assistant can be accessed on <code class=\"language-text\">http://&lt;IP-ADDRESS&gt;:8123</code>.</p>\n<h2 id=\"setting-up-add-ons\" style=\"position:relative;\"><a href=\"#setting-up-add-ons\" aria-label=\"setting up add ons permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up Add-ons</h2>\n<p>There are several must have add-ons. Their setup is describe below.\nAll add-ons are installed from the Home Assistant web interface by clicking on <em>Supervisor->Add-on store</em>.</p>\n<h3 id=\"file-editor\" style=\"position:relative;\"><a href=\"#file-editor\" aria-label=\"file editor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>File editor</h3>\n<p><a href=\"https://www.home-assistant.io/getting-started/configuration/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">File editor</a> is used for editing configuration files as text files right from the web interface, as well as restarting etc. the Home Assistant server.</p>\n<ul>\n<li>Install File editor add-on.</li>\n<li>Select <em>Show in sidebar</em> option.</li>\n<li>Start it.</li>\n</ul>\n<h3 id=\"duck-dns\" style=\"position:relative;\"><a href=\"#duck-dns\" aria-label=\"duck dns permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Duck DNS</h3>\n<p>Detailed instructions can be found <a href=\"remote-access-to-home-assistant\">here</a>.</p>","id":"cf8a9062-49b9-5419-b8a7-71a2526afee6","fields":{"slug":"installing-home-assistant-on-raspberry-pi"},"frontmatter":{"date":"2020-10-09","title":"Installing Home Assistant on Raspberry Pi","category":"Smart Home","tags":["smart hub","home assistant","raspberry pi"],"banner":""},"timeToRead":2},"next":{"excerpt":"PXE boot enables booting machines over network by loading installation files from TFTP server. DHCP server needs to be configured to point to TFTP server for PXE boot. When using DNSmasq, this is done by adding  within its configuration fileâ€¦","html":"<p>PXE boot enables booting machines over network by loading installation files from TFTP server. DHCP server needs to be configured to point to TFTP server for PXE boot. When using DNSmasq, this is done by adding <code class=\"language-text\">dhcp-boot=pxelinux.0,tftp,&lt;tftp_ip_address&gt;</code> within its configuration file (commonly located at <em>/etc/dnsmasq/dnsmasq.conf</em>). More instructions on setting up DNSmasq DHCP/DNS server can be found <a href=\"dhcp_dns_server_dnsmasq\">here</a>.</p>\n<h2 id=\"install-tftp-server\" style=\"position:relative;\"><a href=\"#install-tftp-server\" aria-label=\"install tftp server permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install TFTP server</h2>\n<p>Installing TFTP server can be done by running <code class=\"language-text\">sudo apt update</code> and <code class=\"language-text\">sudo apt install -y tftpd-hpa</code> on Ubuntu. However, it is more convenient to run it within Docker container. Create <em>Dockerfile</em> with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> ubuntu<span class=\"token punctuation\">:</span>20.04\n<span class=\"token keyword\">MAINTAINER</span> republicofdalmatia\n\n<span class=\"token keyword\">RUN</span> apt<span class=\"token punctuation\">-</span>get update &amp;&amp; apt<span class=\"token punctuation\">-</span>get install <span class=\"token punctuation\">-</span>y tftpd<span class=\"token punctuation\">-</span>hpa wget genisoimage git\n<span class=\"token keyword\">EXPOSE</span> 69\n<span class=\"token keyword\">ENTRYPOINT</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/usr/sbin/in.tftpd\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Run the following commands to build and run TFTP server within a Docker container (<code class=\"language-text\">sudo</code> is required for forwarding port 69, while <code class=\"language-text\">exec</code> enters the container):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker build -t tftp:latest <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">sudo</span> docker run -d --restart<span class=\"token operator\">=</span>always --name<span class=\"token operator\">=</span>tftp --hostname<span class=\"token operator\">=</span>tftp -p <span class=\"token number\">69</span>:69 tftp:latest -v -l -L -s /srv/tftp</code></pre></div>\n<p>Alternativelly, simply pull an already built image with <code class=\"language-text\">docker pull republicofdalmatia/tftp:latest</code>.</p>\n<h2 id=\"configure-pxe-boot\" style=\"position:relative;\"><a href=\"#configure-pxe-boot\" aria-label=\"configure pxe boot permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configure PXE boot</h2>\n<p>TFTP server needs to hold certain files to serve as PXE boot server. Minimal files include:</p>\n<ul>\n<li>pxelinux.0 - required for booting over network</li>\n<li>vesamenu.c32 - defines a menu layout</li>\n<li>pxelinux.cfg/default - defines menu options for booting</li>\n<li>autoinstall/user-data - defines autoinstall parameters for Ubuntu 20.04</li>\n</ul>\n<h2 id=\"setup-ubuntu-2004-netboot\" style=\"position:relative;\"><a href=\"#setup-ubuntu-2004-netboot\" aria-label=\"setup ubuntu 2004 netboot permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup Ubuntu 20.04 netboot</h2>\n<p>Download Ubuntu 20.04 iso file from the <a href=\"https://ubuntu.com/download/server\" title=\"Download Ubuntu server edition\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ubuntu official website</a> and place it in <em>/srv/tftp/</em> directory within the <em>tftp</em> container:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker <span class=\"token builtin class-name\">exec</span> -it tftp /bin/bash\n<span class=\"token function\">wget</span> -O /srv/tftp/ubuntu.iso https://hr.mirror.kumi.systems/ubuntureleases/20.04.1/ubuntu-20.04.1-live-server-amd64.iso</code></pre></div>\n<p>Extract files <em>vmlinuz</em> and <em>initrd</em> from the .iso file and place them in <em>/srv//tftp/</em> directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">isoinfo -i /srv/tftp/ubuntu.iso -x /CASPER/INITRD.<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span><span class=\"token number\">1</span> <span class=\"token operator\">></span> /srv/tftp/initrd\nisoinfo -i /srv/tftp/ubuntu.iso -x /CASPER/VMLINUZ.<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span><span class=\"token number\">1</span> <span class=\"token operator\">></span> /srv/tftp/vmlinuz</code></pre></div>\n<p>Create autoinstall script for Ubuntu 20.04 and place it inside tftp directory:</p>\n<p>Create a file _/var/lib/tftboot/default within a container with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># D-I config version 2.0</span>\n<span class=\"token comment\"># search path for the c32 support libraries (libcom32, libutil etc.)</span>\nPATH menus/\nDEFAULT menus/vesamenu.c32\nPROMPT 0\nTIMEOUT 100\nSERIAL 0 9600 <span class=\"token comment\">#needed for serial output, i.e., servers without graphical card</span>\nCONSOLE 1 <span class=\"token comment\">#put 0 to disable VGA output</span>\n\nLABEL local\n        MENU LABEL Boot from the local hard drive\n        MENU default\n        LOCALBOOT 0\n\nLABEL ubuntu\n        MENU LABEL Install Ubuntu 20.04\n        kernel vmlinuz\n        append autoinstall boot=casper ds=nocloud<span class=\"token punctuation\">-</span>net;s=&lt;path/to/autoinstall/script<span class=\"token punctuation\">></span> ip=dhcp url=https<span class=\"token punctuation\">:</span>//hr.mirror.kumi.systems/ubuntureleases/20.04.1/ubuntu<span class=\"token punctuation\">-</span>20.04.1<span class=\"token punctuation\">-</span>live<span class=\"token punctuation\">-</span>server<span class=\"token punctuation\">-</span>amd64.iso initrd=initrd\nramdisk_size=16432 root=/dev/rd/0 rw  <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span></code></pre></div>\n<p>Add <code class=\"language-text\">SERIAL 0 9600</code> at the start of the PXE menu file, where 0 is a serial port ttyS0 and 9600 is a desired baud rate. Additionally, add below <code class=\"language-text\">CONSOLE 0</code> to disable VGA output, or <code class=\"language-text\">CONSOLE 1</code> to enable VGA output.</p>","id":"227924ed-3ab4-582e-82dc-34b461386a48","fields":{"slug":"pxe-boot-with-ubuntu-20-04"},"frontmatter":{"date":"2020-11-03","title":"PXE boot with Ubuntu 20.04","category":"Computers","tags":["pxe","ubuntu","docker","tftp","linux"],"banner":""},"timeToRead":3}}}}